My SymbolTable is implemented by using a hashtable represented by a list of lists(buckets) which stores the keys (identifier or constant in our case)
For resolving collisions it uses separate chaining which means that all the keys which hash to the same value will be contained in the bucket on different positions
because of that I have defined a Pair class for representing the position of an element by refering to the bucket and the position it holds in that bucket

For the SymbolTable I have the following:
size: The size of the hash table, which determines the number of buckets; hash function calculates an index for each element based on this size
table: An ArrayList of ArrayList<T> used to implement the hash table; each element of the outer listis  a bucket, and each bucket has an inner list that can store elements of type T
hash Method: calculates a hash code (index) for an element of type T using the sum of ASCII codes of the characters in the element's string representation modulo the size
insert Method: adds an element of type T to the hash table to the bucket corresponding to the hash value if the element is not already present
getPosition Method: returns a Pair object representing the bucket and position (index within the bucket) of a given element in the hash table
getKey Method: retrieves an element of type T from the hash table using a Pair object that specifies the bucket and position of the element

Pair Class
Constructor: Initializes a Pair object with two integer values representing a position within a hash table (bucket and index).
getBucket(): Returns the bucket value from the Pair.
getIndex(): Returns the index value from the Pair.


ProgramInternalForm Class
Constructor: Initializes a ProgramInternalForm (PIF) object with an empty list of PIF pairs.
add(String token, Pair position): Adds a new PIF pair to the list. A PIF pair consists of a token and its corresponding position.
getPIF(): Returns the list of PIF pairs.
toString(): Generates a string representation of the PIF, with each PIF pair presented on a new line.

Lexic Class
getOperators():Returns a list of operators as specified in the language (e.g., +, -, *, /, <, >, etc.).
getSeparators():Returns a list of separators, including symbols like {, }, (, ), :, ;, space, tab, and new line.
getRw():Returns a list of reserved words defined in the language (e.g., var, int, string, if, else, etc.).

Scanner Class
Constructor:Initializes a Scanner object.Creates instances of SymbolTable, ProgramInternalForm, and Lexic for lexical analysis.
scan(String fileName): Scans the content of a source code file specified by fileName. Tokenizes lines, reads and processes tokens, and generates the Program Internal Form (PIF).Writes the PIF and symbol table to output files.
readLine(List<String> tokensList, int line, StringBuilder result): Processes a list of tokens obtained from a line in the source code. Identifies and classifies each token and adds it to the PIF or symbol table. Updates the result StringBuilder with information about each token and any errors encountered.
tokenizeLine(String line): Tokenizes a given line of source code into a list of individual tokens. Handles special cases like strings and composed operators.
writePif(String outputFile, StringBuilder result): Writes the output to different files, including the PIF file, symbol table file, and output file.
Methods like operator(), separator(), and reservedWord() are used to check if a given token is an operator, separator, or reserved word based on the definitions provided in the Lexic class.
Methods like isNumber(), isString(), isCharacter(), isConstant(), and isIdentifier() are used to determine the type of a token based on the language's lexicon specifications.

FiniteAutomata class 
Constructor: Initializes a finite automaton with a set of states (Q), an alphabet (E), an initial state (q0), a set of final states (F), and transitions (S).
Set<String> getQ(): Returns the set of states (Q).
Set<String> getE(): Returns the alphabet (E).
String getQ0(): Returns the initial state (q0).
Set<String> getF(): Returns the set of final states (F).
Map<FApair, Set<String>> getS(): Returns the transitions (S).
static FiniteAutomata readFromFile(String fileName): Reads a finite automaton from a file.
boolean isDfa(): Checks if the automaton is a deterministic finite automaton (DFA).
boolean isAccepted(String seq): Verifies if a sequence is accepted by the automaton.
void displayElements(): Displays information about the finite automaton, including states, alphabet, transitions, initial state, and final states.
void menu(): Provides a menu for user interaction to display various elements of the finite automaton and verify sequences.
static void main(String[] args):  Main method to run the FiniteAutomata program featuring a menu for user interaction, including options to display the set of states (Q), alphabet (E), transitions (S), initial state (q0), set of final states (F), verify if a sequence is accepted (DFA only), and exit the program.