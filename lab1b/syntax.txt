<program> ::= start <declaration_list> <compound_statement> end
<declaration_list> ::= <declaration> | <declaration> ; <declaration_list>
<declaration> ::= <simple_declaration> | <array_declaration>
<simple_declaration> ::= var <identifier> : <type> ;
<array_declaration> ::= var <identifier> [ <number> ] : <type> ;
<type> ::= int | string 
<compound_statement> ::= <statement> | <statement> <compound_statement>
<statement> ::= <assign_statement> | <if_statement> | <while_statement> | <for_statement> | <read_statement> | <print_statement>
<print_statement> ::= print ( <term> ) ;
<term> ::= <identifier> | <constant>
<read_statement> ::= read ( <identifier> ) ;
<for_statement> ::= for ( <for_condition> ) <statement_list>
<statement_list> ::= { <compound_statement> }
<for_condition> ::= <assign_statement> <condition> ; <assign_statement>
<assign_statement> ::= <identifier> <assign_operator> <expression> ;
<expression> ::= <term> | <term> <arithmetic_operator> <term>
<condition> ::= <expression> <relational_operator> <expression>
<while_statement> ::= while ( <condition> ) <statement_list> 
<if_statement> ::= if ( <condition> ) <statement_list> | <if_statement> <else_statement> 
<else_statement> ::= else <statement_list>

<identifier> ::= <letter> | <letter> <seq> 
<seq> ::= <char> | <char> <seq> 
<char> ::= <letter>| <digit> | <underline_character>
<digit> ::= 0 | 1 |...| 9
<letter> ::= a | b | ...| z | A | B | ...| Z
<underline_character> ::=  _
<constant> ::= <constint> | <conststring>
<constint> ::= 0 | <start_digit> | <sign> <start_digit> | <start_digit> <digit_seq> | <sign> <start_digit> <digit_seq>
<start_digit> ::= 1 | 2 |...| 9
<digit_seq> ::= <digit> | <digit> <digit_seq> 
<digit> ::= 0 | 1 |...| 9
<sign> ::= - | +
<conststring> ::= "<string>"
<string> ::= <char> | <char><string>
<char> ::= <letter>| <digit> | <special_character>
<special_character> ::= ! | @ | ... | ?
<arithmetic_operator> ::=  +|  - | * | / | %
<relational_operator> ::= < | <= | >= | == | > 
